/*
* AnagramStrategy
*
* @description: Subclass of JobSchedulerStrategy.
*
* @author: m.pinna10@studenti.unipi.it
*/

package com.mycompany.anagram;

import com.mycompany.framework.AJob;
import com.mycompany.framework.JobSchedulerStrategy;
import com.mycompany.framework.Pair;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;


public class AnagramStrategy extends JobSchedulerStrategy<String, String> {

    private static final String FILE_EXTENSION = ".txt";
    private static final String FILE_OUT = "src/main/java/count_anagrams.txt";
    private final String dir_path;
    
    /**
     * Constructor.
     * 
     * @param dir_path The absolute path of a directory where documents are
     *                 stored
     */
    public AnagramStrategy(String dir_path) {
        checkDirectory(dir_path);
        this.dir_path = dir_path;
    }
    
    /**
     * Visits a directory and creates a new job for each file ending with
     * 'FILE_EXTENSION' in that directory.
     * 
     * @return A stream of jobs
     */
    @Override
    protected Stream<AJob<String, String>> emit() {
        try {
            var paths = Files.walk(Path.of(dir_path));
            return paths
                .filter(Files::isRegularFile)
                .filter(x -> x.toString().endsWith(FILE_EXTENSION))
                .map(j -> new AnagramJob(j.toString()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Stream.empty();
    }
    
    /**
     * Writes the list of ciao keys and the number of words associated with 
     * each key, one per line.
     * 
     * @param groups The groups of pairs generated by 'collect' phase.
     */
    @Override
    protected void output(Stream<Pair<String, List<String>>> groups) {
        
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_OUT))){
            
            groups.forEach(p -> {
                
                String line = String.format("%s - %d", 
                        p.getKey(), 
                        p.getValue().size());
                
                try {
                    bw.write(line);
                    bw.newLine();
                } catch (IOException ex) {
                    Logger.getLogger(AnagramStrategy.class.getName())
                            .log(Level.SEVERE, null, ex);
                }
            });  
        } catch (IOException ex) {
            Logger.getLogger(AnagramStrategy.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Utility function for checking if a given path is a directory.
     * 
     * @param dir_path The path to check if it is a directory.
     */
    private void checkDirectory(String dir_path) {
        File f = new File(dir_path);
        if(!f.isDirectory()) {
            throw new RuntimeException("Given path is not a directory!");
        }
    }
    
            
}
